id,Category,Topic,Priority,Notes,PracticeExercise,link
1,.NET & C# Advanced,"Garbage Collection (Generations, LOH, Finalization, IDisposable)",High,Understand how the GC works to write memory-efficient code. Explain the Dispose pattern.,"Create a class that wraps an unmanaged resource (like a file stream). Implement the IDisposable pattern correctly, including a finalizer. Write client code to demonstrate its use with a 'using' statement and explain why both Dispose and the finalizer are needed.",https://nhonvo.github.io/posts/2025-09-06-garbage-collection
2,.NET & C# Advanced,"Async/Await Deep Dive (State Machine, SynchronizationContext, ConfigureAwait)",High,"Be ready to explain the async state machine and demonstrate with code how a deadlock can occur (e.g., in a UI or classic ASP.NET context) and how ConfigureAwait(false) helps prevent it.","Create a simple Console App that calls an async method and blocks on the result (e.g., using .Result or .Wait()). Explain why it deadlocks in some environments. Modify the async method to use ConfigureAwait(false) and explain why that resolves the issue.",https://nhonvo.github.io/posts/2025-09-06-async-await-deep-dive
3,.NET & C# Advanced,"LINQ Internals (IQueryable vs. IEnumerable, Deferred Execution)",High,Explain how this impacts database queries with Entity Framework.,"Using EF Core and an in-memory database, write a query against a DbSet<Product>. First, use .AsEnumerable() before a .Where() clause and inspect the generated query. Then, write the same logic but use .AsQueryable() (or just chain the .Where() directly) and explain the difference in the executed SQL.",https://nhonvo.github.io/posts/2025-09-06-linq-internals
4,.NET & C# Advanced,"Delegates, Events, Func<T>, Action<T>",High,Understand common use cases like event-driven architecture and callbacks.,Create a 'Worker' class that performs a long-running operation. Define an event in this class called 'ProgressChanged'. Create a UI or Console class that subscribes to this event and reports the progress. Trigger the event from within the worker's operation.,https://nhonvo.github.io/posts/2025-09-06-delegates-events-func-action
5,.NET & C# Advanced,"Dependency Injection (Scopes: Singleton, Scoped, Transient)",High,Explain the differences and when to use each scope in an ASP.NET Core application.,"In an ASP.NET Core API, create a simple service interface (e.g., IOperationLogger) and an implementation that has a unique ID (e.g., a Guid) set in its constructor. Register this service three times: once as Singleton, once as Scoped, and once as Transient. Inject all three into a controller and log their unique IDs on a single request to demonstrate the lifetime differences.",https://nhonvo.github.io/posts/2025-09-06-dependency-injection-scopes
6,.NET & C# Advanced,"Memory Management (Stack vs. Heap, Value vs. Reference Types, Boxing/Unboxing)",High,Focus on the performance implications of each.,"Write a function that takes an ArrayList (which stores objects) and adds a large number of integers (e.g., 1 million) to it. Then, write a second function that does the same thing but with a List<int>. Use a Stopwatch to measure the performance difference and explain why boxing/unboxing in the first function causes the overhead.",https://nhonvo.github.io/posts/2025-09-06-memory-management
7,.NET & C# Advanced,.NET Generic Host & Application Lifetime,Medium,Explain how background services and the application are managed in .NET Core.,Create a .NET Core Worker Service project. Implement a background service (IHostedService) that logs a message every 5 seconds. Configure it in Program.cs and explain how the Generic Host manages the startup and graceful shutdown of your service.,https://nhonvo.github.io/posts/2025-09-06-generic-host-application-lifetime
8,.NET & C# Advanced,Multithreading vs. Asynchronous Programming,High,"Clarify the difference and when to use constructs like Task, Thread, Parallel.For.","Write a method that processes a list of 100 items. Implement three versions: 1) a simple for-loop, 2) using Parallel.ForEach, and 3) using a list of Tasks with Task.WhenAll. For each item, simulate I/O-bound work (Task.Delay) and CPU-bound work (a tight loop). Discuss the performance and resource usage of each approach.",https://nhonvo.github.io/posts/2025-09-06-multithreading-vs-asynchronous
9,ASP.NET Core,Middleware Pipeline,High,Explain how the request pipeline is built and the importance of middleware ordering.,"Create a custom middleware component that logs the request path and a custom response header. Register it in the pipeline. Then, register a second piece of middleware that short-circuits the pipeline (doesn't call next). Demonstrate how changing the order of these two middleware components affects the application's behavior.",https://nhonvo.github.io/posts/2025-09-06-middleware-pipeline
10,ASP.NET Core,"Filters (Action, Authorization, Exception, Resource, Result)",High,Describe the filter pipeline and provide use cases for each type of filter.,Create a custom Action Filter attribute that logs the time it takes for an action method to execute. Apply this filter to a controller action and verify that it logs the timing information correctly.,https://nhonvo.github.io/posts/2025-09-06-filters
11,ASP.NET Core,Authentication vs. Authorization,High,"Explain common schemes like JWT, OAuth 2.0, OpenID Connect, and Cookie-based authentication.","Create two API endpoints. Secure one with [Authorize]. Secure the second with a custom policy-based authorization requirement (e.g., [Authorize(Policy = IsAdmin"")]). Implement the policy and handler to check for a specific claim in the user's identity.""",https://nhonvo.github.io/posts/2025-09-06-authentication-vs-authorization
12,ASP.NET Core,API Security (OWASP Top 10),High,"Discuss how to prevent common vulnerabilities (e.g., SQL Injection, XSS, CSRF) within the ASP.NET Core framework.","Create an API endpoint that takes a raw string and uses it to build a SQL query with string concatenation. Explain why this is vulnerable to SQL Injection. Refactor the code to use parameterized queries (e.g., with Dapper or EF Core's FromSqlRaw) to prevent the vulnerability.",https://nhonvo.github.io/posts/2025-09-06-api-security
13,ASP.NET Core,"API Versioning Strategies (URL, Header, Query String)",High,Discuss the pros and cons of each approach.,"Using the Asp.Versioning.Mvc library, create a single controller with two action methods that respond to the same route. One method should be for API version 1.0, and the other for 2.0. Configure the application to support URL-segment-based versioning (e.g., /api/v1/products).",https://nhonvo.github.io/posts/2025-09-06-api-versioning
14,ASP.NET Core,"Configuration Management (appsettings, User Secrets, Environment Variables, Azure Key Vault)",High,Describe the hierarchy and how to manage secrets securely.,"Define a configuration value in appsettings.json. Then, define a value with the same key using the .NET Secret Manager. Finally, set an environment variable with the same key. In your code, read this configuration value and demonstrate which source takes precedence. Explain the hierarchy.",https://nhonvo.github.io/posts/2025-09-06-configuration-management
15,ASP.NET Core,"Hosting Models (Kestrel, IIS, Docker)",Medium,Understand the role of the reverse proxy and in-process vs. out-of-process hosting.,"Write a simple Dockerfile for an ASP.NET Core API project. The Dockerfile should build the project and set up the final runtime image. Build the image and run it in a container, ensuring you can access the API from your host machine.",https://nhonvo.github.io/posts/2025-09-06-hosting-models
16,ASP.NET Core,Health Checks and Resilience (Polly),Medium,"Discuss patterns like Retry, Circuit Breaker, and how to implement health check endpoints.","Configure health checks for your API. Add a check for a dependency, like a database connection. Then, use Polly to wrap an HttpClient call in your service layer with a Retry policy to handle transient network failures.",https://nhonvo.github.io/posts/2025-09-06-health-checks-resilience
17,ASP.NET Core,Minimal APIs vs. Controllers,Medium,Explain the differences and when you might choose one over the other.,"Create a simple CRUD API for a Product entity. Implement the 'Create' and 'Read' endpoints using traditional controllers. Then, implement the 'Update' and 'Delete' endpoints using Minimal APIs in Program.cs. Discuss the pros and cons you observed.",https://nhonvo.github.io/posts/2025-09-06-minimal-apis-vs-controllers
18,Data Access & Databases,"EF Core (Change Tracking, Loading Strategies: Eager, Explicit, Lazy)",High,Deeply understand how EF Core works to avoid performance pitfalls. Explain N+1 problem.,"Create two related entities, Author and Book (one-to-many). Write a query to fetch all authors and then loop through them, printing the title of each book. Enable logging to show the N+1 query problem. Refactor the initial query using Include() (eager loading) to solve the problem in a single database roundtrip.",https://nhonvo.github.io/posts/2025-09-06-ef-core-performance-tuning
19,Data Access & Databases,"EF Core Performance Tuning (AsNoTracking, Compiled Queries, Query Splitting)",High,Provide specific examples of how to optimize EF Core queries.,"Write a read-only query that fetches a large amount of data. Measure its performance. Then, add .AsNoTracking() to the query, measure it again, and explain why the performance improves and when it is appropriate to use this method.",https://nhonvo.github.io/posts/2025-09-06-ef-core-performance-tuning
20,Data Access & Databases,Dapper vs. EF Core,Medium,Discuss when and why you would choose a micro-ORM like Dapper over a full-featured ORM.,Create a simple Product table. Write a method to fetch a product by its ID using EF Core. Write a second method to do the exact same thing using Dapper. Compare the code required for both and discuss the scenarios where Dapper's performance and control might be preferable.,https://nhonvo.github.io/posts/2025-09-06-dapper-vs-ef-core
21,Data Access & Databases,"SQL Query Optimization (Execution Plans, Indexing)",High,Be able to analyze a query's execution plan and suggest improvements using indexes.,"Given a table with millions of rows and a slow SELECT query with a WHERE clause on a non-indexed column, use SQL Server Management Studio (or your DB client) to display the query's actual execution plan. Identify the costly 'Table Scan' operation. Add a non-clustered index to the column, re-run the query, and show how the execution plan changes to a more efficient 'Index Seek'.",https://nhonvo.github.io/posts/2025-09-06-sql-query-optimization
22,Data Access & Databases,Transaction Isolation Levels,High,"Explain the different isolation levels and the concurrency issues they prevent (dirty reads, phantom reads).","Using EF Core, begin a transaction with the Serializable isolation level. Within the transaction, read a range of records from a table. Before committing, use a separate database connection to insert a new row into that range. Attempt to re-read the range within the transaction and explain why it blocks or fails, thus preventing a phantom read.",https://nhonvo.github.io/posts/2025-09-06-transaction-isolation-levels
23,Data Access & Databases,Database Concurrency Control (Pessimistic vs. Optimistic),Medium,"Explain how to handle concurrency conflicts, for example using a row version/timestamp in EF Core.","In an EF Core entity, add a [Timestamp] property. In your code, fetch an entity, change a property, but before calling SaveChanges(), update the same record directly in the database. Now, when you call SaveChanges(), it should throw a DbUpdateConcurrencyException. Catch this exception and explain how you would handle it (e.g., notify the user, reload data).",https://nhonvo.github.io/posts/2025-09-06-database-concurrency-control
24,Software Design & Architecture,SOLID Principles,High,"Be ready to explain each principle with a practical, real-world C# code example.","Given a C# class that violates at least two SOLID principles (e.g., a 'Report' class that both queries the database and formats the output), refactor it into multiple classes that adhere to the Single Responsibility Principle and the Dependency Inversion Principle.",https://nhonvo.github.io/posts/2025-09-06-solid-principles
25,Software Design & Architecture,"Design Patterns (Repository, Unit of Work, Factory, Singleton, Strategy, Decorator)",High,Describe the problem each pattern solves and how to implement it.,Implement the Strategy pattern. Create an IExportService interface with a method Export(data). Create two concrete implementations: CsvExportService and JsonExportService. Create a context class that can be configured with one of these strategies at runtime to perform the export.,https://nhonvo.github.io/posts/2025-09-06-design-patterns
26,Software Design & Architecture,Architectural Styles (Monolith vs. Microservices),High,"Discuss the trade-offs, communication patterns (sync/async), and challenges of microservices.","Whiteboard a simple e-commerce system. First, design it as a monolith, showing the main components. Then, redesign it as a set of microservices (e.g., Orders, Products, Users). For the microservices design, explain how the 'Place Order' process would work, including how services would communicate (e.g., REST calls vs. a message bus).",https://nhonvo.github.io/posts/2025-09-06-architectural-styles
27,Software Design & Architecture,Domain-Driven Design (DDD) Concepts,Medium,"Explain core concepts like Aggregate, Entity, Value Object, Bounded Context.",Model a Customer entity and an Address value object in C#. The Address class should be immutable. The Customer should have a method like UpdateAddress(newAddress) that enforces validation rules. Explain why Address is a good candidate for a value object.,https://nhonvo.github.io/posts/2025-09-06-domain-driven-design
28,Software Design & Architecture,CQRS (Command Query Responsibility Segregation),Medium,"Explain the pattern and its benefits, especially in complex systems.","Implement a simple in-memory CQRS pattern. Create a CreateProductCommand and a corresponding CreateProductCommandHandler. Create a GetProductByIdQuery and a corresponding GetProductByIdQueryHandler. The command handler should modify state, and the query handler should only read state. Create a simple 'mediator' to dispatch commands and queries to their handlers.",https://nhonvo.github.io/posts/2025-09-06-cqrs
29,Software Design & Architecture,RESTful API Design Principles,High,"Discuss principles like statelessness, resource-based URLs, and proper use of HTTP verbs.","Design the REST API endpoints for a blog post resource. Show the URLs and HTTP verbs for: 1) Getting all posts, 2) Getting a single post, 3) Creating a new post, 4) Updating a post, 5) Deleting a post, and 6) Getting all comments for a post. Justify your choices.",https://nhonvo.github.io/posts/2025-09-06-restful-api-design
30,Front-End: Core Web,HTML Semantics & Accessibility,High,"Explain the importance of semantic HTML for SEO and accessibility (WCAG). Differentiate between div/span and semantic tags like article, nav, etc.","Audit a simple webpage for accessibility issues. Refactor non-semantic elements (divs used for buttons or headers) into their correct semantic counterparts (button, h1, etc.) and add necessary ARIA attributes.",https://nhonvo.github.io/posts/2025-09-06-html-semantics-accessibility
31,Front-End: Core Web,Advanced CSS Layouts (Flexbox & Grid),High,"Discuss the differences between Flexbox and Grid and when to use each. Explain concepts like flex-grow, justify-content, and grid-template-columns.","Recreate a complex, responsive web page layout (like a news site or e-commerce product page) using a combination of CSS Grid for the overall structure and Flexbox for component alignment.",https://nhonvo.github.io/posts/2025-09-06-advanced-css-layouts
32,Front-End: Core Web,Modern JavaScript (ES6+),High,"Explain key ES6+ features: Promises, async/await, let/const, arrow functions, and modules. Discuss the browser's event loop.","Refactor a piece of callback-based asynchronous code (callback hell) to use Promises, and then again using async/await. Explain the improvements in readability and error handling.",https://nhonvo.github.io/posts/2025-09-06-modern-javascript
33,Front-End: Core Web,DOM Manipulation & Events,High,Explain how JavaScript interacts with the DOM. Discuss event bubbling  capturing  and delegation.,"Build a simple to-do list application using vanilla JavaScript. Users should be able to add, delete, and mark items as complete. Use event delegation for the delete and complete actions.",https://nhonvo.github.io/posts/2025-09-06-dom-manipulation-events
34,Front-End: ReactJS,Component Architecture & Lifecycle,High,Explain the difference between functional and class components. Discuss the component lifecycle and the purpose of key lifecycle methods or their Hook equivalents (useEffect).,"Create a reusable React component (e.g., a data table or a modal) and pass props to it. Manage its state and handle events within the component.",https://nhonvo.github.io/posts/2025-09-06-react-component-architecture-lifecycle
35,Front-End: ReactJS,React Hooks Deep Dive,High,"Explain the purpose and usage of useState, useEffect, useContext, and useReducer. Discuss the rules of Hooks.","Refactor a class component that uses lifecycle methods (componentDidMount, componentDidUpdate) and state into a functional component using useState and useEffect hooks.",https://nhonvo.github.io/posts/2025-09-06-react-hooks-deep-dive
36,Front-End: ReactJS,State Management (Redux vs. Context API),High,Discuss different state management strategies in large-scale React applications. Compare and contrast Redux and the Context API.,Build a small application with a global theme (light/dark mode). Implement the theme toggle twice: once using the Context API and once using Redux. Discuss the pros and cons of each approach for this use case.,https://nhonvo.github.io/posts/2025-09-06-react-state-management
37,Front-End: ReactJS,React Router & API Integration,High,Explain how to implement client-side routing. Discuss strategies for fetching data from an API  including handling loading and error states.,"Create a multi-page application using React Router. One page should fetch data from a public API (e.g., GitHub or a weather API) and display it to the user, correctly handling the loading and error UI states.",https://nhonvo.github.io/posts/2025-09-06-react-router-api-integration
38,Front-End: ReactJS,React Performance Optimization,Medium,"Discuss common performance bottlenecks in React and how to solve them. Explain concepts like memoization (React.memo), useCallback, useMemo, and code splitting.","Given a slow-rendering React component with an expensive calculation, use useMemo to optimize it. Profile the component using React DevTools before and after to demonstrate the performance improvement.",https://nhonvo.github.io/posts/2025-09-06-react-performance-optimization
39,Front-End: ReactJS,React Testing,Medium,Explain the difference between unit and end-to-end testing in a React context. Discuss the roles of libraries like Jest and React Testing Library.,"Write unit tests for a React component using Jest and React Testing Library. The tests should cover rendering, user interaction (e.g., clicking a button), and state changes.",https://nhonvo.github.io/posts/2025-09-06-react-testing
40,Cloud & DevOps (Azure/AWS),Core Compute Services (App Service vs. EC2),High,"Compare and contrast Azure App Service with AWS EC2. Discuss use cases, management overhead, and scaling capabilities for each.",Deploy a simple web application to both an Azure App Service and an AWS EC2 instance. Document the steps and compare the deployment complexity and configuration options.,https://nhonvo.github.io/posts/2025-09-06-core-compute-services
41,Cloud & DevOps (Azure/AWS),Serverless Computing (Azure Functions vs. AWS Lambda),High,"Explain the principles of serverless computing. Compare Azure Functions and AWS Lambda, discussing triggers, execution environments, and pricing models.",Create a serverless function on both Azure and AWS that is triggered by an HTTP request. The function should process the request data and store a result in a cloud storage service (Azure Blob Storage or AWS S3).,https://nhonvo.github.io/posts/2025-09-06-serverless-computing
42,Cloud & DevOps (Azure/AWS),Database Services (Azure SQL vs. AWS RDS),Medium,"Compare Azure SQL Database with AWS RDS. Discuss managed database features, high availability, and disaster recovery options.",Provision a managed relational database in both Azure and AWS. Connect a web application to each database and perform basic CRUD operations.,https://nhonvo.github.io/posts/2025-09-06-database-services
43,Cloud & DevOps (Azure/AWS),"Containerization & Orchestration (Docker, AKS vs. EKS)",High,Explain how to containerize an application with Docker. Compare Azure Kubernetes Service (AKS) and Amazon Elastic Kubernetes Service (EKS) for managing containerized applications.,"Create a multi-stage Dockerfile for an ASP.NET Core application. Then, write a basic Kubernetes manifest to deploy this container image to either AKS or EKS.",https://nhonvo.github.io/posts/2025-09-06-containerization-orchestration
44,Cloud & DevOps (Azure/AWS),Infrastructure as Code (Bicep/ARM vs. Terraform/CloudFormation),High,"Explain the benefits of IaC. Compare platform-specific tools (Bicep, CloudFormation) with cloud-agnostic tools (Terraform).",Write an IaC template (using your choice of Bicep or Terraform) to deploy a simple web application. The template should provision a compute resource (App Service or EC2) and a database.,https://nhonvo.github.io/posts/2025-09-06-infrastructure-as-code
45,Cloud & DevOps (Azure/AWS),CI/CD Pipelines (Azure DevOps vs. GitHub Actions),High,Describe a typical CI/CD pipeline. Compare the features and workflow of Azure DevOps Pipelines and GitHub Actions.,"Create a CI/CD pipeline using either Azure DevOps or GitHub Actions for a .NET application. The pipeline should automatically build, test, and deploy the application to an Azure App Service upon a push to the main branch.",https://nhonvo.github.io/posts/2025-09-06-ci-cd-pipelines
46,Testing,Unit Testing vs. Integration Testing,High,Explain the difference and the role of each in the a testing pyramid.,"Given a service class that has a dependency on a repository interface (e.g., IProductRepository), write a unit test for a method in the service. Use a mocking framework like Moq or NSubstitute to create a mock of the repository and isolate the service for testing.",https://nhonvo.github.io/posts/2025-09-06-unit-vs-integration-testing
47,Testing,"Mocking Frameworks (Moq, NSubstitute)",High,Demonstrate how to use a mocking library to isolate dependencies in unit tests.,"Using Moq, set up a mock IProductRepository to return a specific product when its GetById method is called with a certain ID. In a separate test, configure the mock to throw an exception when GetById is called. Verify the behavior in both tests.",https://nhonvo.github.io/posts/2025-09-06-mocking-frameworks
48,Testing,Integration Testing with WebApplicationFactory,Medium,Explain how to write in-memory integration tests for your ASP.NET Core APIs.,"Using WebApplicationFactory, write an integration test for an API endpoint. The test should create an in-memory test server, make an HTTP GET request to an endpoint, and assert that the response has a 200 OK status code and the correct content.",https://nhonvo.github.io/posts/2025-09-06-integration-testing-with-webapplicationfactory
49,Testing,Performance & Load Testing,Medium,"Discuss strategies and tools (e.g., k6, JMeter, Azure Load Testing) for testing application performance and identifying bottlenecks.","Using a tool like k6, write a simple load test script. The script should simulate 10 virtual users continuously hitting a specific API endpoint for 30 seconds. Run the test and analyze the results, such as average response time and request rate.",https://nhonvo.github.io/posts/2025-09-06-performance-load-testing
50,Behavioral & System Design,System Design Practice,High,"Practice designing systems (e.g., URL shortener, Twitter feed). For each, start by defining key non-functional requirements like scalability, availability, latency, consistency, and cost, then discuss the trade-offs of your design choices.","Design a high-level architecture for a real-time notification system. Discuss: 1) How clients (web/mobile) would connect, 2) How the backend would push notifications, 3) How to handle millions of concurrent connections, 4) The data model for storing notifications. (Hint: Consider SignalR, WebSockets, Message Queues).",https://nhonvo.github.io/posts/2025-09-06-system-design-practice
51,Behavioral & System Design,Past Project Deep Dive,High,"Be prepared to discuss your most challenging projects, your role, the architecture, and what you would do differently.","Pick a project from your resume. Be ready to draw the architecture on a whiteboard. Explain the main components, data flow, and technologies used. Describe the biggest technical challenge you faced and how you solved it. Then, explain what you would change if you were to build it again today.",https://nhonvo.github.io/posts/2025-09-06-past-project-deep-dive
52,.NET & C# Advanced,Advanced LINQ,High,Explain deferred execution vs. immediate execution in detail. Discuss how to build dynamic queries using Expression Trees.,Write a function that takes a collection of objects and a string representing a property name and a value. Use Expression Trees to dynamically build a LINQ query that filters the collection based on the property and value.,https://nhonvo.github.io/posts/2025-09-06-advanced-linq
53,.NET & C# Advanced,Advanced Reflection and Roslyn,High,Discuss the performance implications of reflection. Explain how to use the Roslyn compiler API for code analysis and generation.,"Write a simple Roslyn analyzer that identifies and flags the use of DateTime.Now in code, suggesting DateTime.UtcNow as a best practice.",https://nhonvo.github.io/posts/2025-09-06-advanced-reflection-roslyn
54,Software Design & Architecture,Event-Driven Architecture & Messaging Patterns,High,"Discuss patterns like Publish-Subscribe, Competing Consumers, and Sagas. Explain the role of a message broker (e.g., RabbitMQ, Azure Service Bus).","Design a system for processing e-commerce orders using an event-driven approach. Whiteboard how events like OrderCreated, PaymentProcessed, and OrderShipped would flow between microservices via a message bus.",https://nhonvo.github.io/posts/2025-09-06-event-driven-architecture-messaging-patterns
55,Software Design & Architecture,Caching Strategies,High,"Explain different caching strategies (e.g., cache-aside, read-through, write-through, write-behind) and their trade-offs. Discuss distributed caching with tools like Redis.",Implement a cache-aside strategy for a data-intensive API endpoint. Use an in-memory cache or a Redis client to store results and demonstrate how subsequent requests for the same data are served from the cache.,https://nhonvo.github.io/posts/2025-09-06-caching-strategies
56,Software Design & Architecture,Clean Architecture,High,Explain the principles of Clean Architecture (or Onion Architecture). Discuss the dependency rule and how it promotes separation of concerns.,"Refactor a traditional N-tier application (UI -> Business Logic -> Data Access) into a Clean Architecture structure, with clearly defined layers for Domain, Application, Infrastructure, and Presentation.",https://nhonvo.github.io/posts/2025-09-06-clean-architecture
57,Front-End: ReactJS,Advanced State Management with Zustand or Jotai,Medium,Discuss the limitations of Context for high-frequency updates. Explain the core concepts of a modern state management library like Zustand (store-based) or Jotai (atom-based).,"Create a simple counter application. First, implement it using React's useState. Then, refactor it to use Zustand for state management. Explain the benefits of this approach in a larger application.",https://nhonvo.github.io/posts/2025-09-06-advanced-state-management-zustand-jotai
58,Cloud & DevOps (Azure/AWS),Cloud Security Best Practices,High,"Discuss the Shared Responsibility Model. Explain how to secure a cloud environment using concepts like Identity and Access Management (IAM), network security groups, and secret management (e.g., Azure Key Vault, AWS Secrets Manager).","Given a scenario with a web application and a database in the cloud, design a secure network architecture. This should include a virtual private cloud (VPC), public private subnets, and security groups that restrict traffic appropriately.",https://nhonvo.github.io/posts/2025-09-06-cloud-security-best-practices
59,Cloud & DevOps (Azure/AWS),Cloud Monitoring and Observability,High,"Explain the difference between monitoring and observability. Discuss the three pillars of observability: logs, metrics, and traces. Name key services in Azure (Azure Monitor, Application Insights) and AWS (CloudWatch, X-Ray).","Instrument an ASP.NET Core application with Application Insights (Azure) or AWS X-Ray. Demonstrate how to trace a request from the front-end, through the API, and to a database query. Set up an alert for when the average response time exceeds a certain threshold.",https://nhonvo.github.io/posts/2025-09-06-cloud-monitoring-observability
60,Behavioral & System Design,Scalability Patterns,High,"Discuss horizontal vs. vertical scaling. Explain patterns like load balancing, database read replicas, and database sharding.","Design a system that can handle a massive influx of traffic, like a social media platform. Whiteboard how you would scale the web servers, application servers, and the database to handle millions of concurrent users.",https://nhonvo.github.io/posts/2025-09-06-scalability-patterns
61,.NET & C# Advanced,Unsafe Code and Pointers,Low,Explain scenarios where unsafe code and pointers might be necessary in C#. Discuss the risks and benefits.,"Write a C# function using an unsafe context to directly manipulate an array of integers in memory, for example, to quickly zero out the array. Explain why this might be faster than a traditional loop in some cases.",https://nhonvo.github.io/posts/2025-09-06-unsafe-code-and-pointers
62,.NET & C# Advanced,Expression Trees,Medium,Explain what Expression Trees are and how they are used by LINQ providers.,"Write a function that takes a simple lambda expression (e.g., x => x > 5) and manually constructs an equivalent expression tree. Then, compile and execute the expression tree.",https://nhonvo.github.io/posts/2025-09-06-expression-trees
63,ASP.NET Core,gRPC vs. REST,Medium,Compare and contrast gRPC and REST for inter-service communication. Discuss the role of Protocol Buffers.,Create a simple .NET solution with two projects: a gRPC service and a client that consumes it. Implement a simple unary call and explain the benefits of the code-first approach with Protobuf.,https://nhonvo.github.io/posts/2025-09-06-grpc-vs-rest
64,Data Access & Databases,NoSQL Database Concepts,Medium,"Explain the differences between document, key-value, columnar, and graph databases. Discuss consistency models (e.g., eventual consistency).","Model a simple data structure (e.g., a user profile with a list of posts) for both a relational database (like SQL Server) and a document database (like MongoDB or Cosmos DB). Discuss the pros and cons of each model.",https://nhonvo.github.io/posts/2025-09-07-nosql-database-concepts
65,Software Design & Architecture,API Gateway Pattern,High,"Explain the purpose of an API Gateway in a microservices architecture. Discuss features like request routing, aggregation, and authentication offloading.","Whiteboard a microservices architecture that uses an API Gateway. Show how a single client request to the gateway can be fanned out to multiple downstream services, and how the gateway aggregates the responses.",https://nhonvo.github.io/posts/2025-09-07-api-gateway-pattern
66,Front-End: Core Web,Web Performance Optimization,High,"Discuss key web performance metrics (e.g., LCP, FID, CLS). Explain techniques for optimizing performance, such as lazy loading images, code splitting, and browser caching.","Use Lighthouse in Chrome DevTools to audit a web page. Identify performance bottlenecks and implement at least two suggested optimizations (e.g., compressing images, minifying CSS/JS).",https://nhonvo.github.io/posts/2025-09-07-web-performance-optimization
67,Front-End: ReactJS,Micro-Frontends,Medium,"Explain the concept of micro-frontends and the problems they solve. Discuss different implementation strategies (e.g., module federation).","Conceptually design a micro-frontend architecture for an e-commerce site. Decide which parts of the site would be separate micro-frontends (e.g., product search, shopping cart, recommendations) and how they would be composed into a single application.",https://nhonvo.github.io/posts/2025-09-07-web-performance-optimization
68,Cloud & DevOps (Azure/AWS),Service Mesh (e.g.  Istio  Linkerd),Medium,"Explain what a service mesh is and its role in a microservices architecture. Discuss features like traffic management, service discovery, and observability.",Whiteboard how a service mesh could be used to implement a canary deployment for a microservice. Explain how the service mesh would route a small percentage of traffic to the new version of the service.,https://nhonvo.github.io/posts/2025-09-07-service-mesh-istio-linkerd
69,.NET & C# Advanced,High-Performance .NET with Span<T> and Memory<T>,High,"Explain how Span<T> and Memory<T> help to reduce memory allocations and improve performance. Discuss scenarios for their use, such as parsing and string manipulation.",Refactor a string-parsing method that uses string.Substring() multiple times to a new version that uses ReadOnlySpan<char> to avoid creating intermediate string allocations. Benchmark both versions to show the performance gain.,https://nhonvo.github.io/posts/2025-09-07-high-performance-net-with-span-and-memory
70,.NET & C# Advanced,Channels for Producer/Consumer Scenarios,High,Explain how System.Threading.Tasks.Channels can be used to create efficient producer/consumer workflows. Compare them to other synchronization primitives like BlockingCollection.,"Implement a background service that processes items from a queue. Use a Channel to pass data from a 'producer' (e.g., a controller endpoint) to a 'consumer' (the background service) in a thread-safe and asynchronous manner.",https://nhonvo.github.io/posts/2025-09-07-channels-producer-consumer-scenarios
71,.NET & C# Advanced,Source Generators,Medium,Explain what C# Source Generators are and how they can be used for compile-time metaprogramming to reduce boilerplate and improve performance.,"Write a simple Source Generator that automatically generates a ToString() method for a class, which includes all of its public properties. Apply it to a class and demonstrate that the method is available at compile time.",https://nhonvo.github.io/posts/2025-09-07-source-generators
72,ASP.NET Core,Advanced Authentication & Authorization,High,"Discuss advanced topics like claims transformation, custom authorization policies with requirements and handlers, and federated identity using OpenID Connect.","Implement a custom authorization handler that checks for a specific condition, such as whether a user has been a member for more than a year (based on a RegistrationDate claim). Apply this policy to an API endpoint.",https://nhonvo.github.io/posts/2025-09-07-advanced-authentication-authorization
73,Software Design & Architecture,Saga Pattern for Distributed Transactions,High,Explain how the Saga pattern manages data consistency across microservices without using two-phase commit. Discuss the Choreography vs. Orchestration approaches.,"Whiteboard the Saga pattern for a 'trip booking' system involving three services: Flights, Hotels, and Payments. Show the sequence of events and compensating transactions for both a successful booking and a failure scenario (e.g., the hotel booking fails).",https://nhonvo.github.io/posts/2025-09-07-saga-pattern-for-distributed-transactions
74,Data Access & Databases,Advanced Database Indexing,High,"Discuss advanced indexing strategies beyond single-column indexes, such as covering indexes, filtered indexes, and columnstore indexes. Explain what index fragmentation is and how to address it.","Given a slow SQL query with multiple WHERE clauses and JOINs, analyze its execution plan. Design a covering index that satisfies the query, eliminating the need for key lookups, and explain how it improves performance.",https://nhonvo.github.io/posts/2025-09-07-advanced-database-indexing
75,Front-End: ReactJS,"SSR, SSG, and ISR with Next.js/Remix",High,"Explain the differences between Server-Side Rendering, Static Site Generation, and Incremental Static Regeneration. Discuss the trade-offs and which to use for different types of web pages (e.g., a blog vs. a user dashboard).","Create a simple Next.js application with three pages: one that uses SSG (e.g., an 'About' page), one that uses SSR (e.g., a user-specific 'Profile' page), and one that uses ISR (e.g., a 'Products' page that revalidates every 60 seconds).",https://nhonvo.github.io/posts/2025-09-07-ssr-ssg-and-isr-with-nextjs-remix
76,Cloud & DevOps (Azure/AWS),DevSecOps - Integrating Security into CI/CD,High,"Explain the concept of DevSecOps ('Shift Left'). Discuss how to integrate security scanning tools into a CI/CD pipeline, including Static Application Security Testing (SAST), Dynamic Application Security Testing (DAST), and dependency scanning.","Modify a CI/CD pipeline (in Azure DevOps or GitHub Actions) to include a step that runs a container vulnerability scan on the built Docker image (e.g., using Trivy or a cloud provider's scanner). Configure the pipeline to fail if a critical vulnerability is found.",https://nhonvo.github.io/posts/2025-09-07-devsecops-integrating-security-into-ci-cd
77,Cloud & DevOps (Azure/AWS),Cloud Cost Management & FinOps,High,"Discuss strategies for optimizing cloud costs. Explain concepts like rightsizing instances, using spot instances, setting budgets and alerts, and tagging resources for cost allocation.","Analyze a sample cloud bill or usage report. Identify the top three cost drivers and propose specific, actionable recommendations for reducing the cost of each one (e.g., 'Switch this EC2 instance from on-demand to a savings plan' or 'Implement a lifecycle policy on this S3 bucket').",https://nhonvo.github.io/posts/2025-09-07-cloud-cost-management-finops
78,Behavioral & System Design,Managing Technical Debt,High,"Define technical debt and provide examples. Discuss a strategic approach for identifying, prioritizing, and paying down technical debt in a large codebase without halting feature development.",You've joined a team with a critical application that has significant technical debt. Outline your 30-60-90 day plan for addressing it. How would you convince product managers and stakeholders to invest time in these improvements?,https://nhonvo.github.io/posts/2025-09-07-managing-technical-debt
79,Behavioral & System Design,Leading and Mentoring,High,Describe your philosophy on mentoring junior and mid-level engineers. How do you handle code review feedback? How do you foster a culture of technical excellence and continuous improvement on your team?,"Describe a time you mentored another engineer. What was the situation, what was your approach, and what was the outcome? What did you learn from the experience?",https://nhonvo.github.io/posts/2025-09-07-leading-and-mentoring
80,Data Access & Databases,Data Annotation vs. Fluent API,Medium,Discuss the pros and cons of using Data Annotations vs. the Fluent API for configuring the EF Core data model. Explain which takes precedence.,"Create an entity with a property that is configured differently using both Data Annotations (e.g., [MaxLength(50)]) and the Fluent API (e.g., .HasMaxLength(100)). Demonstrate which configuration is applied when creating a migration.",https://nhonvo.github.io/posts/2025-09-07-data-annotation-vs-fluent-api
81,Data Access & Databases,EF Core Global Query Filters,Medium,Explain how to use global query filters to implement soft-delete functionality or multi-tenancy in an application.,"Define a global query filter on an entity (e.g., Product) that automatically filters out any records where an IsDeleted property is true. Write a query to fetch all products and show that the deleted ones are not returned by default. Then, show how to disable the filter for a specific query.",https://nhonvo.github.io/posts/2025-09-07-ef-core-global-query-filters
82,Data Access & Databases,Executing Raw SQL and Stored Procedures,High,Explain when it's appropriate to drop down to raw SQL or stored procedures with EF Core. Discuss the security implications (SQL injection) and how to prevent them.,Write code that safely executes a stored procedure using FromSqlRaw to return a list of entities. Ensure that you are passing parameters correctly to prevent SQL injection.,https://nhonvo.github.io/posts/2025-09-07-executing-raw-sql-and-stored-procedures
83,Data Access & Databases,EF Core Migrations Deep Dive,Medium,"Discuss advanced migration scenarios, such as generating idempotent SQL scripts for deployment, and strategies for rolling back a failed migration in a production environment.","Generate a SQL script from your EF Core migrations. Then, modify the script to make it idempotent (i.e., safe to run multiple times). Explain the changes you made and why they are important for CI/CD.",https://nhonvo.github.io/posts/2025-09-07-ef-core-migrations-deep-dive
84,Data Access & Databases,EF Core Interceptors,High,"Explain what interceptors are and how they can be used to intercept database operations for logging, auditing, or modifying commands before they are executed.",Implement a DbCommandInterceptor that logs the full text of every SQL command executed by EF Core to the console. Register the interceptor and show the logs generated by a simple query.,https://nhonvo.github.io/posts/2025-09-07-ef-core-interceptors
85,Data Access & Databases,EF Core Shadow Properties & Backing Fields,Low,"Explain what shadow properties are and why you might use them (e.g., for foreign keys or auditing data that you don't want on your entity model). Discuss how backing fields can allow for read-only properties.","Configure a LastUpdated shadow property on an entity. Use an interceptor or override SaveChanges to automatically set the value of this shadow property whenever the entity is updated. Then, query the database to confirm the value was saved, even though it's not on the C# class.",https://nhonvo.github.io/posts/2025-09-07-ef-core-shadow-properties-backing-fields
86,Testing,In-Memory vs. Testcontainers,Medium,"Compare and contrast the use of EF Core's in-memory provider with using a real database in a Docker container (via Testcontainers) for integration testing. Discuss the trade-offs in terms of speed, fidelity, and complexity.",Write two sets of integration tests for a repository. One set should use the EF Core in-memory database. The second set should use Testcontainers to spin up a real PostgreSQL or SQL Server container for the tests. Discuss any tests that pass with one setup but fail with the other.,https://nhonvo.github.io/posts/2025-09-07-in-memory-vs-testcontainers
87,Data Access & Databases,EF Core Second-Level Caching,Medium,Explain the concept of a second-level cache and how it can improve performance by caching query results outside of a single DbContext instance. Name a popular library for implementing it.,"Integrate a second-level caching provider (like EFCoreSecondLevelCacheInterceptor) into an ASP.NET Core application. Enable caching for a specific query and demonstrate that on the second execution of the query, the data is served from the cache instead of hitting the database.",https://nhonvo.github.io/posts/2025-09-07-ef-core-second-level-caching
88,Software Design & Architecture,Unit of Work Pattern with EF Core,High,Explain how the Unit of Work pattern can be used to group multiple repository operations into a single transaction. Discuss how DbContext inherently implements this pattern.,"Create a UnitOfWork class that encapsulates a DbContext and provides access to multiple repositories (e.g., IProductRepository, IOrderRepository). Implement a CompleteAsync method that calls SaveChangesAsync on the context. Use this unit of work in a service layer to perform a multi-step business operation.",https://nhonvo.github.io/posts/2025-09-07-unit-of-work-pattern-with-ef-core
89,.NET & C# Advanced,IAsyncEnumerable & Streaming APIs,Medium,"Explain how IAsyncEnumerable allows for efficient, non-blocking iteration over asynchronous data streams. Contrast this with returning a Task<IEnumerable<T>>.","Create an ASP.NET Core API endpoint that returns an IAsyncEnumerable<string>. The method should simulate fetching data in chunks (e.g., with Task.Delay) and yield return each chunk. Show how a client can consume this streaming response.",https://nhonvo.github.io/posts/2025-09-07-iasyncenumerable-streaming-apis
90,Front-End: Core Web,Web Workers for Offloading Main Thread,Medium,Explain what Web Workers are and how they can be used to run scripts in the background to prevent a web page from becoming unresponsive during long-running tasks.,"Create a simple web page with a button that performs an expensive calculation (e.g., calculating a large number of Fibonacci numbers). First, run it on the main thread and show that the UI freezes. Then, refactor it to use a Web Worker for the calculation, demonstrating that the UI remains responsive.",https://nhonvo.github.io/posts/2025-09-07-web-workers-for-offloading-main-thread
91,Front-End: ReactJS,State Machines and XState,Low,"Discuss the benefits of using a state machine for managing complex component state, such as preventing impossible states. Give a brief overview of a library like XState.","Model a simple data fetching component's state (e.g., 'idle', 'loading', 'success', 'error') as a state machine using XState. Integrate this machine into a React component to manage the UI based on the current state.",https://nhonvo.github.io/posts/2025-09-07-state-machines-and-xstate
92,Cloud & DevOps (Azure/AWS),Chaos Engineering Principles,Low,Explain the concept of Chaos Engineering. Discuss how deliberately injecting failures into a system in a controlled way can help build confidence in its resilience.,"Design a chaos experiment for a microservices-based application. For example, what would you test by injecting latency between the API gateway and a downstream service? What tool could you use (e.g., Chaos Monkey, Azure Chaos Studio)?",https://nhonvo.github.io/posts/2025-09-07-chaos-engineering-principles
93,Software Design & Architecture,Feature Flags/Toggles,High,"Discuss how feature flags can be used to decouple deployment from release, enabling practices like canary releases and A/B testing. Explain the risks and how to manage them.",Implement a simple feature flag system (or use a library like Microsoft.FeatureManagement). Create an API endpoint that behaves differently depending on whether a feature flag is enabled or disabled. Show how you can change the application's behavior without redeploying the code.,https://nhonvo.github.io/posts/2025-09-07-feature-flags-toggles
94,Behavioral & System Design,API Rate Limiting and Throttling Strategies,High,"Discuss different algorithms for rate limiting (e.g., Token Bucket, Leaky Bucket). Explain where rate limiting can be implemented in a system (e.g., API Gateway, middleware).","Design a rate-limiting strategy for a multi-tenant API. How would you handle different rate limits for different subscription tiers (e.g., Free vs. Pro)? Whiteboard the components involved.",https://nhonvo.github.io/posts/2025-09-07-api-rate-limiting-and-throttling-strategies
95,Data Access & Databases,Reverse Engineering an Existing Database,Low,Explain the process of using EF Core tools to scaffold a DbContext and entity classes from an existing database schema (database-first approach).,"Use the dotnet ef dbcontext scaffold command to generate a full EF Core model from an existing SQL database (e.g., a sample database like Northwind). Review the generated code and discuss any necessary customizations.",https://nhonvo.github.io/posts/2025-09-07-reverse-engineering-an-existing-database
96,ASP.NET Core,CORS Policies and Security,High,"Explain how Cross-Origin Resource Sharing (CORS) works. Discuss how to configure named policies, middleware, and attributes for both permissive and restrictive scenarios.","In an ASP.NET Core API, configure a restrictive default CORS policy. Then, create a specific named policy that allows requests only from 'https://example.com' with specific headers and methods. Apply this named policy to a single controller or endpoint.",https://nhonvo.github.io/posts/2025-09-07-cors-policies-and-security
97,Software Design & Architecture,DTOs and Object Mapping (AutoMapper),High,Explain the purpose of Data Transfer Objects (DTOs) and why they are important for decoupling your internal domain models from your external API contracts. Discuss the pros and cons of using an object mapping library like AutoMapper.,"Create an EF Core entity Product and a corresponding ProductDto. Configure AutoMapper to map between the two. In a controller, use the mapping to transform the entity to a DTO before returning it to the client, and to map an incoming DTO to an entity for saving to the database.",https://nhonvo.github.io/posts/2025-09-07-dtos-and-object-mapping-automapper
98,ASP.NET Core,Advanced Model Validation (FluentValidation),Medium,"Discuss the limitations of Data Annotations for validation. Explain how to use a library like FluentValidation to create complex, decoupled, and easily testable validation rules.","Create a complex model and use FluentValidation to create rules that are not possible with data annotations (e.g., conditional validation, or a rule that depends on another service). Integrate it into the ASP.NET Core pipeline to have validation errors automatically populate the ModelState.",https://nhonvo.github.io/posts/2025-09-07-advanced-model-validation-fluentvalidation
99,ASP.NET Core,HttpClientFactory for Resilient HTTP Requests,High,"Explain the problems with new HttpClient() (socket exhaustion) and how HttpClientFactory solves them. Discuss how to use it to configure named or typed clients and integrate it with Polly for resilience patterns (Retry, Circuit Breaker).",Use HttpClientFactory to create a typed client for an external API. Use the Polly extension to add a transient error handling policy that retries failed requests (HTTP 5xx or network errors) up to three times with an exponential backoff.,https://nhonvo.github.io/posts/2025-09-07-httpclientfactory-for-resilient-http-requests
100,ASP.NET Core,API Documentation with OpenAPI/Swagger,High,Explain the importance of API documentation. Discuss how to use libraries like Swashbuckle to automatically generate an OpenAPI specification and interactive Swagger UI from your C# controllers.,"Add Swashbuckle to an existing API project. Customize the generated Swagger UI by adding XML comments to your controller actions and models to provide detailed descriptions, examples, and annotations ([ProducesResponseType]).",https://nhonvo.github.io/posts/2025-09-07-api-documentation-with-openapi-swagger
101,ASP.NET Core,Response Caching & Compression,Medium,"Explain the difference between in-memory, distributed, and response caching. Discuss how to apply response caching profiles and how to configure response compression.","Add response compression to an ASP.NET Core API. Then, implement response caching on a GET endpoint that serves data that changes infrequently. Use attributes to set a cache profile and demonstrate that subsequent requests receive a cached response.",https://nhonvo.github.io/posts/2025-09-07-response-caching-compression
102,Data Structures & Algorithms (DSA),Big O Notation & Complexity Analysis,High,"This is the absolute foundation. Be able to analyze the time and space complexity of any algorithm you write or discuss. Understand O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n).","For every DSA practice problem you solve, verbally and in code comments, analyze and state the time and space complexity of your solution. Explain the reasoning. Compare the complexity of brute-force vs. optimized solutions.",https://nhonvo.github.io/posts/2025-09-07-big-o-notation-complexity-analysis
103,Data Structures & Algorithms (DSA),Arrays & Strings - Core Operations and Patterns,High,"Focus on time/space complexity. Master patterns like Two Pointers, Sliding Window, and Prefix Sums for solving a wide range of problems efficiently.","Implement the Two Sum problem. Given a sorted array, square each element and return the sorted result. Find the maximum sum of any contiguous subarray of size 'k' (Sliding Window).",https://nhonvo.github.io/posts/2025-09-07-arrays-strings-core-operations-patterns
104,Data Structures & Algorithms (DSA),Linked Lists (Singly & Doubly),High,Understand the trade-offs vs. arrays. Be proficient in manipulating pointers. Master patterns like the Fast & Slow Pointer technique for cycle detection and finding the middle element.,Reverse a singly linked list. Detect if a linked list has a cycle. Merge two sorted linked lists. Find the middle element of a linked list.,https://nhonvo.github.io/posts/2025-09-07-linked-lists-singly-doubly
105,Data Structures & Algorithms (DSA),Stacks & Queues,High,"Understand their LIFO/FIFO principles. Know common use cases: Stacks for parsing, recursion simulation, and reversing. Queues for BFS and task scheduling.",Implement a Queue using two Stacks. Solve the Valid Parentheses problem. Implement a basic calculator to evaluate a string expression. Find the first non-repeating character in a stream of characters.,https://nhonvo.github.io/posts/2025-09-07-stacks-queues
106,Data Structures & Algorithms (DSA),Hash Tables (Dictionary/HashMap),High,"This is one of the most important data structures. Understand how hashing works, and discuss collision resolution strategies (chaining vs. open addressing) and their trade-offs.","Implement a HashMap from scratch with basic get, put, and delete operations, using chaining for collision resolution. Use a Dictionary to solve problems like finding the first non-repeating character in a string or checking if two arrays have a common item.",https://nhonvo.github.io/posts/2025-09-07-hash-tables-dictionary-hashmap
107,Data Structures & Algorithms (DSA),Trees - Traversal and Core Concepts,High,"Be able to implement and explain the differences between In-order, Pre-order, and Post-order (DFS variations) and Level-order (BFS) traversals, both recursively and iteratively.",Implement all four traversal methods for a given binary tree. Find the maximum depth of a binary tree. Check if a binary tree is symmetric (a mirror of itself).,https://nhonvo.github.io/posts/2025-09-07-trees-traversal-and-core-concepts
108,Data Structures & Algorithms (DSA),Binary Search Trees (BST),High,"Know the properties of a BST. Understand the time complexity for search, insertion, and deletion. Be able to validate if a given tree is a BST.","Implement search, insert, and delete operations for a BST. Write a function to validate if a binary tree is a valid BST. Find the lowest common ancestor (LCA) of two nodes in a BST.",https://nhonvo.github.io/posts/2025-09-07-binary-search-trees-bst
109,Data Structures & Algorithms (DSA),"Heaps (Min-Heap, Max-Heap)",Medium,Understand the properties of a heap and how they are typically implemented using an array. Know their use cases for priority queues and finding the K-th smallest/largest element.,Implement a Min-Heap from scratch with insert and extractMin operations. Use a Min-Heap to find the 'K' largest elements in an array. Find the median from a data stream.,https://nhonvo.github.io/posts/2025-09-07-heaps-min-heap-max-heap
110,Data Structures & Algorithms (DSA),Tries (Prefix Trees),Medium,Understand the structure of a Trie and its efficiency for string prefix problems. Know use cases like autocomplete and spell checkers.,"Implement a Trie from scratch with insert, search, and startsWith methods. Use the Trie to build a simple autocomplete system that suggests words based on a given prefix.",https://nhonvo.github.io/posts/2025-09-07-tries-prefix-trees
111,Data Structures & Algorithms (DSA),Graphs - Representations & Traversal,High,Understand adjacency list vs. adjacency matrix representations and their trade-offs. Be proficient in Breadth-First Search (BFS) for shortest path in unweighted graphs and Depth-First Search (DFS) for traversal and cycle detection.,Implement BFS and DFS for a given graph. Clone a graph. Find the number of connected components in an undirected graph. Detect a cycle in a directed graph.,https://nhonvo.github.io/posts/2025-09-07-graphs-representations-traversal
112,Data Structures & Algorithms (DSA),Advanced Graph Algorithms,Medium,Understand Dijkstra's algorithm for shortest path in a weighted graph and topological sort for ordering tasks with dependencies. Be aware of algorithms like A* and Prim's/Kruskal's for Minimum Spanning Trees.,"Implement Dijkstra's algorithm to find the shortest path between two nodes in a weighted graph. Given a list of courses and their prerequisites, find a valid order to take the courses (Topological Sort).",https://nhonvo.github.io/posts/2025-09-07-advanced-graph-algorithms
113,Data Structures & Algorithms (DSA),Searching & Sorting Algorithms,High,"Know the implementation and complexity of Bubble Sort, Insertion Sort, Merge Sort, Quick Sort, and Radix Sort. Deeply understand the trade-offs, especially for Quick Sort (pivot choice, in-place operation) and Merge Sort (space complexity). Master Binary Search.","Implement Merge Sort and Quick Sort from scratch. Implement binary search on a sorted array. Given a rotated sorted array, find a target element.",https://nhonvo.github.io/posts/2025-09-07-searching-sorting-algorithms
114,Data Structures & Algorithms (DSA),Recursion & Backtracking,High,"Master recursion as a problem-solving technique. Understand the backtracking template for solving problems involving permutations, combinations, and subsets. Be mindful of the call stack and potential for stack overflow.",Generate all possible subsets of a given set. Find all permutations of a string. Solve the N-Queens problem. Implement a Sudoku solver.,https://nhonvo.github.io/posts/2025-09-07-recursion-backtracking
115,Data Structures & Algorithms (DSA),Dynamic Programming (DP),High,This is a critical topic for senior interviews. Be able to identify a DP problem by recognizing optimal substructure and overlapping subproblems. Differentiate between memoization (top-down) and tabulation (bottom-up) approaches.,Solve the Climbing Stairs problem. Find the maximum sum of a non-adjacent subarray. Solve the Coin Change problem. Find the Longest Common Subsequence of two strings.,https://nhonvo.github.io/posts/2025-09-07-dynamic-programming-dp
116,Data Structures & Algorithms (DSA),Greedy Algorithms,Medium,Understand the greedy approach of making a locally optimal choice at each step. Be able to prove or disprove whether a greedy strategy works for a given problem.,Solve the Coin Change problem using a greedy approach and explain why it doesn't work for all coin denominations (contrasting it with the DP solution). Implement Huffman coding. Solve the Activity Selection problem.,https://nhonvo.github.io/posts/2025-09-07-greedy-algorithms
117,Data Structures & Algorithms (DSA),Divide and Conquer,Medium,"Understand how this paradigm breaks problems into smaller subproblems, solves them recursively, and combines the results. Recognize Merge Sort and Quick Sort as classic examples.",Find the maximum and minimum elements in an array using the divide and conquer approach. Implement Karatsuba's algorithm for fast multiplication of large numbers.,https://nhonvo.github.io/posts/2025-09-07-divide-and-conquer
118,Data Structures & Algorithms (DSA),Advanced String Manipulation,Medium,Be familiar with advanced algorithms like Rabin-Karp for substring search and algorithms for finding the longest palindromic substring.,Implement the Rabin-Karp algorithm to find all occurrences of a pattern in a text. Find the longest palindromic substring in a given string.,https://nhonvo.github.io/posts/2025-09-07-advanced-string-manipulation
119,Data Structures & Algorithms (DSA),Bit Manipulation,Low,"Understand basic bitwise operators (AND, OR, XOR, NOT, shifts). Know their use cases for efficient problem-solving, such as finding a missing number, checking for powers of two, or managing sets of flags.","Given an array where every element appears twice except for one, find the single element using XOR. Check if a number is a power of two using bitwise operators. Count the number of set bits (1s) in an integer.",https://nhonvo.github.io/posts/2025-09-07-bit-manipulation
120,Data Structures & Algorithms (DSA),Big O Notation & Complexity Analysis,High,"This is the absolute foundation. Be able to analyze the time and space complexity of any algorithm you write or discuss. Understand O(1), O(log n), O(n), O(n log n), O(n^2), O(2^n).","For every DSA practice problem you solve, verbally and in code comments, analyze and state the time and space complexity of your solution. Explain the reasoning. Compare the complexity of brute-force vs. optimized solutions.",https://nhonvo.github.io/posts/2025-09-07-big-o-notation-complexity-analysis
121,Data Structures & Algorithms (DSA),Arrays & Strings - Core Operations and Patterns,High,"Focus on time/space complexity. Master patterns like Two Pointers, Sliding Window, and Prefix Sums for solving a wide range of problems efficiently.","Implement the Two Sum problem. Given a sorted array, square each element and return the sorted result. Find the maximum sum of any contiguous subarray of size 'k' (Sliding Window).",https://nhonvo.github.io/posts/2025-09-07-arrays-strings-core-operations-patterns
122,Data Structures & Algorithms (DSA),Linked Lists (Singly & Doubly),High,Understand the trade-offs vs. arrays. Be proficient in manipulating pointers. Master patterns like the Fast & Slow Pointer technique for cycle detection and finding the middle element.,Reverse a singly linked list. Detect if a linked list has a cycle. Merge two sorted linked lists. Find the middle element of a linked list.,https://nhonvo.github.io/posts/2025-09-07-linked-lists-singly-doubly
123,Data Structures & Algorithms (DSA),Stacks & Queues,High,"Understand their LIFO/FIFO principles. Know common use cases: Stacks for parsing, recursion simulation, and reversing. Queues for BFS and task scheduling.",Implement a Queue using two Stacks. Solve the Valid Parentheses problem. Implement a basic calculator to evaluate a string expression. Find the first non-repeating character in a stream of characters.,https://nhonvo.github.io/posts/2025-09-07-stacks-queues
124,Data Structures & Algorithms (DSA),Hash Tables (Dictionary/HashMap),High,"This is one of the most important data structures. Understand how hashing works, and discuss collision resolution strategies (chaining vs. open addressing) and their trade-offs.","Implement a HashMap from scratch with basic get, put, and delete operations, using chaining for collision resolution. Use a Dictionary to solve problems like finding the first non-repeating character in a string or checking if two arrays have a common item.",https://nhonvo.github.io/posts/2025-09-07-hash-tables-dictionary-hashmap
125,Data Structures & Algorithms (DSA),Trees - Traversal and Core Concepts,High,"Be able to implement and explain the differences between In-order, Pre-order, and Post-order (DFS variations) and Level-order (BFS) traversals, both recursively and iteratively.",Implement all four traversal methods for a given binary tree. Find the maximum depth of a binary tree. Check if a binary tree is symmetric (a mirror of itself).,https://nhonvo.github.io/posts/2025-09-07-trees-traversal-and-core-concepts
126,Data Structures & Algorithms (DSA),Binary Search Trees (BST),High,"Know the properties of a BST. Understand the time complexity for search, insertion, and deletion. Be able to validate if a given tree is a BST.","Implement search, insert, and delete operations for a BST. Write a function to validate if a binary tree is a valid BST. Find the lowest common ancestor (LCA) of two nodes in a BST.",https://nhonvo.github.io/posts/2025-09-07-binary-search-trees-bst
127,Data Structures & Algorithms (DSA),"Heaps (Min-Heap, Max-Heap)",Medium,Understand the properties of a heap and how they are typically implemented using an array. Know their use cases for priority queues and finding the K-th smallest/largest element.,Implement a Min-Heap from scratch with insert and extractMin operations. Use a Min-Heap to find the 'K' largest elements in an array. Find the median from a data stream.,https://nhonvo.github.io/posts/2025-09-07-heaps-min-heap-max-heap
128,Data Structures & Algorithms (DSA),Tries (Prefix Trees),Medium,Understand the structure of a Trie and its efficiency for string prefix problems. Know use cases like autocomplete and spell checkers.,"Implement a Trie from scratch with insert, search, and startsWith methods. Use the Trie to build a simple autocomplete system that suggests words based on a given prefix.",https://nhonvo.github.io/posts/2025-09-07-tries-prefix-trees
129,Data Structures & Algorithms (DSA),Graphs - Representations & Traversal,High,Understand adjacency list vs. adjacency matrix representations and their trade-offs. Be proficient in Breadth-First Search (BFS) for shortest path in unweighted graphs and Depth-First Search (DFS) for traversal and cycle detection.,Implement BFS and DFS for a given graph. Clone a graph. Find the number of connected components in an undirected graph. Detect a cycle in a directed graph.,https://nhonvo.github.io/posts/2025-09-07-graphs-representations-traversal
130,Data Structures & Algorithms (DSA),Advanced Graph Algorithms,Medium,Understand Dijkstra's algorithm for shortest path in a weighted graph and topological sort for ordering tasks with dependencies. Be aware of algorithms like A* and Prim's/Kruskal's for Minimum Spanning Trees.,"Implement Dijkstra's algorithm to find the shortest path between two nodes in a weighted graph. Given a list of courses and their prerequisites, find a valid order to take the courses (Topological Sort).",https://nhonvo.github.io/posts/2025-09-07-advanced-graph-algorithms
131,Data Structures & Algorithms (DSA),Searching & Sorting Algorithms,High,"Know the implementation and complexity of Bubble Sort, Insertion Sort, Merge Sort, Quick Sort, and Radix Sort. Deeply understand the trade-offs, especially for Quick Sort (pivot choice, in-place operation) and Merge Sort (space complexity). Master Binary Search.","Implement Merge Sort and Quick Sort from scratch. Implement binary search on a sorted array. Given a rotated sorted array, find a target element.",https://nhonvo.github.io/posts/2025-09-07-searching-sorting-algorithms
132,Data Structures & Algorithms (DSA),Recursion & Backtracking,High,"Master recursion as a problem-solving technique. Understand the backtracking template for solving problems involving permutations, combinations, and subsets. Be mindful of the call stack and potential for stack overflow.",Generate all possible subsets of a given set. Find all permutations of a string. Solve the N-Queens problem. Implement a Sudoku solver.,https://nhonvo.github.io/posts/2025-09-07-recursion-backtracking
133,Data Structures & Algorithms (DSA),Dynamic Programming (DP),High,This is a critical topic for senior interviews. Be able to identify a DP problem by recognizing optimal substructure and overlapping subproblems. Differentiate between memoization (top-down) and tabulation (bottom-up) approaches.,Solve the Climbing Stairs problem. Find the maximum sum of a non-adjacent subarray. Solve the Coin Change problem. Find the Longest Common Subsequence of two strings.,https://nhonvo.github.io/posts/2025-09-07-dynamic-programming-dp
134,Data Structures & Algorithms (DSA),Greedy Algorithms,Medium,Understand the greedy approach of making a locally optimal choice at each step. Be able to prove or disprove whether a greedy strategy works for a given problem.,Solve the Coin Change problem using a greedy approach and explain why it doesn't work for all coin denominations (contrasting it with the DP solution). Implement Huffman coding. Solve the Activity Selection problem.,https://nhonvo.github.io/posts/2025-09-07-greedy-algorithms
135,Data Structures & Algorithms (DSA),Divide and Conquer,Medium,"Understand how this paradigm breaks problems into smaller subproblems, solves them recursively, and combines the results. Recognize Merge Sort and Quick Sort as classic examples.",Find the maximum and minimum elements in an array using the divide and conquer approach. Implement Karatsuba's algorithm for fast multiplication of large numbers.,https://nhonvo.github.io/posts/2025-09-07-divide-and-conquer
136,Data Structures & Algorithms (DSA),Advanced String Manipulation,Medium,Be familiar with advanced algorithms like Rabin-Karp for substring search and algorithms for finding the longest palindromic substring.,Implement the Rabin-Karp algorithm to find all occurrences of a pattern in a text. Find the longest palindromic substring in a given string.,https://nhonvo.github.io/posts/2025-09-07-advanced-string-manipulation
137,Data Structures & Algorithms (DSA),Bit Manipulation,Low,"Understand basic bitwise operators (AND, OR, XOR, NOT, shifts). Know their use cases for efficient problem-solving, such as finding a missing number, checking for powers of two, or managing sets of flags.","Given an array where every element appears twice except for one, find the single element using XOR. Check if a number is a power of two using bitwise operators. Count the number of set bits (1s) in an integer.",https://nhonvo.github.io/posts/2025-09-07-bit-manipulation
